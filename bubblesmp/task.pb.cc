// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace ademovic {
namespace bubblesmp {

namespace {

const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreeConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreeConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TreeConfig_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TaskConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_2eproto() {
  protobuf_AddDesc_task_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task.proto");
  GOOGLE_CHECK(file != NULL);
  Point_descriptor_ = file->message_type(0);
  static const int Point_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, q_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  TreeConfig_descriptor_ = file->message_type(1);
  static const int TreeConfig_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConfig, bubbles_per_extend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConfig, min_bubble_reach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConfig, max_bubble_gap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConfig, bubble_extend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConfig, use_extended_bubbles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConfig, max_bubbles_per_branch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConfig, max_binary_search_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConfig, min_move_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConfig, step_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConfig, checks_per_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConfig, s_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConfig, checks_on_s_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConfig, bur_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConfig, bur_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConfig, number_of_extensions_),
  };
  TreeConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreeConfig_descriptor_,
      TreeConfig::default_instance_,
      TreeConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreeConfig));
  TreeConfig_Type_descriptor_ = TreeConfig_descriptor_->enum_type(0);
  TaskConfig_descriptor_ = file->message_type(2);
  static const int TaskConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskConfig, environment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskConfig, generator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskConfig, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskConfig, tree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskConfig, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskConfig, destination_),
  };
  TaskConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskConfig_descriptor_,
      TaskConfig::default_instance_,
      TaskConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreeConfig_descriptor_, &TreeConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskConfig_descriptor_, &TaskConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_2eproto() {
  delete Point::default_instance_;
  delete Point_reflection_;
  delete TreeConfig::default_instance_;
  delete TreeConfig_reflection_;
  delete TaskConfig::default_instance_;
  delete TaskConfig_reflection_;
}

void protobuf_AddDesc_task_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::ademovic::bubblesmp::protobuf_AddDesc_bubblesmp_2findex_2eproto();
  ::com::ademovic::bubblesmp::environment::protobuf_AddDesc_bubblesmp_2fenvironment_2fenvironment_2eproto();
  ::com::ademovic::bubblesmp::generators::protobuf_AddDesc_bubblesmp_2fgenerators_2fgenerator_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntask.proto\022\026com.ademovic.bubblesmp\032\025bu"
    "bblesmp/index.proto\032\'bubblesmp/environme"
    "nt/environment.proto\032$bubblesmp/generato"
    "rs/generator.proto\"\022\n\005Point\022\t\n\001q\030\001 \003(\001\"\207"
    "\005\n\nTreeConfig\022=\n\004type\030\001 \001(\0162\'.com.ademov"
    "ic.bubblesmp.TreeConfig.Type:\006BUBBLE\022\036\n\022"
    "bubbles_per_extend\030\010 \001(\r:\00225\022\033\n\020min_bubb"
    "le_reach\030\t \001(\001:\0012\022\033\n\016max_bubble_gap\030\n \001("
    "\001:\0030.4\022\031\n\rbubble_extend\030\013 \001(\001:\00296\022\"\n\024use"
    "_extended_bubbles\030\014 \001(\010:\004true\022\"\n\026max_bub"
    "bles_per_branch\030\002 \001(\r:\00250\022\"\n\027max_binary_"
    "search_depth\030\007 \001(\r:\0014\022\034\n\017min_move_length"
    "\030\003 \001(\001:\0030.9\022\027\n\013step_length\030\004 \001(\001:\00210\022\033\n\017"
    "checks_per_step\030\005 \001(\r:\00225\022\021\n\005s_min\030\r \001(\001"
    ":\00216\022\033\n\017checks_on_s_min\030\016 \001(\r:\00240\022\023\n\010bur"
    "_size\030\017 \001(\r:\0017\022\031\n\rbur_threshold\030\020 \001(\r:\0021"
    "0\022 \n\024number_of_extensions\030\021 \001(\r:\00210\"\202\001\n\004"
    "Type\022\n\n\006BUBBLE\020\000\022\013\n\007CLASSIC\020\001\022\021\n\rGREEDY_"
    "BUBBLE\020\002\022\022\n\016GREEDY_CLASSIC\020\003\022\023\n\017CRAWLING"
    "_BUBBLE\020\004\022\022\n\016BERTRAM_BUBBLE\020\005\022\007\n\003RBT\020\006\022\010"
    "\n\004GRBT\020\007\"\354\002\n\nTaskConfig\022J\n\013environment\030\001"
    " \001(\01325.com.ademovic.bubblesmp.environmen"
    "t.EnvironmentConfig\022G\n\tgenerator\030\002 \001(\01324"
    ".com.ademovic.bubblesmp.generators.Gener"
    "atorSettings\0224\n\005index\030\003 \001(\0132%.com.ademov"
    "ic.bubblesmp.IndexSettings\0220\n\004tree\030\004 \001(\013"
    "2\".com.ademovic.bubblesmp.TreeConfig\022-\n\006"
    "source\030\005 \001(\0132\035.com.ademovic.bubblesmp.Po"
    "int\0222\n\013destination\030\006 \001(\0132\035.com.ademovic."
    "bubblesmp.Point", 1175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task.proto", &protobuf_RegisterTypes);
  Point::default_instance_ = new Point();
  TreeConfig::default_instance_ = new TreeConfig();
  TaskConfig::default_instance_ = new TaskConfig();
  Point::default_instance_->InitAsDefaultInstance();
  TreeConfig::default_instance_->InitAsDefaultInstance();
  TaskConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_2eproto {
  StaticDescriptorInitializer_task_2eproto() {
    protobuf_AddDesc_task_2eproto();
  }
} static_descriptor_initializer_task_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Point::kQFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.ademovic.bubblesmp.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.ademovic.bubblesmp.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:com.ademovic.bubblesmp.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
  q_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.ademovic.bubblesmp.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double q = 1;
      case 1: {
        if (tag == 9) {
         parse_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_q())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_q())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_q;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.ademovic.bubblesmp.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.ademovic.bubblesmp.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.ademovic.bubblesmp.Point)
  // repeated double q = 1;
  for (int i = 0; i < this->q_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->q(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.ademovic.bubblesmp.Point)
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.ademovic.bubblesmp.Point)
  // repeated double q = 1;
  for (int i = 0; i < this->q_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->q(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.ademovic.bubblesmp.Point)
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  // repeated double q = 1;
  {
    int data_size = 0;
    data_size = 8 * this->q_size();
    total_size += 1 * this->q_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  q_.MergeFrom(from.q_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    q_.Swap(&other->q_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TreeConfig_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeConfig_Type_descriptor_;
}
bool TreeConfig_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TreeConfig_Type TreeConfig::BUBBLE;
const TreeConfig_Type TreeConfig::CLASSIC;
const TreeConfig_Type TreeConfig::GREEDY_BUBBLE;
const TreeConfig_Type TreeConfig::GREEDY_CLASSIC;
const TreeConfig_Type TreeConfig::CRAWLING_BUBBLE;
const TreeConfig_Type TreeConfig::BERTRAM_BUBBLE;
const TreeConfig_Type TreeConfig::RBT;
const TreeConfig_Type TreeConfig::GRBT;
const TreeConfig_Type TreeConfig::Type_MIN;
const TreeConfig_Type TreeConfig::Type_MAX;
const int TreeConfig::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TreeConfig::kTypeFieldNumber;
const int TreeConfig::kBubblesPerExtendFieldNumber;
const int TreeConfig::kMinBubbleReachFieldNumber;
const int TreeConfig::kMaxBubbleGapFieldNumber;
const int TreeConfig::kBubbleExtendFieldNumber;
const int TreeConfig::kUseExtendedBubblesFieldNumber;
const int TreeConfig::kMaxBubblesPerBranchFieldNumber;
const int TreeConfig::kMaxBinarySearchDepthFieldNumber;
const int TreeConfig::kMinMoveLengthFieldNumber;
const int TreeConfig::kStepLengthFieldNumber;
const int TreeConfig::kChecksPerStepFieldNumber;
const int TreeConfig::kSMinFieldNumber;
const int TreeConfig::kChecksOnSMinFieldNumber;
const int TreeConfig::kBurSizeFieldNumber;
const int TreeConfig::kBurThresholdFieldNumber;
const int TreeConfig::kNumberOfExtensionsFieldNumber;
#endif  // !_MSC_VER

TreeConfig::TreeConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.ademovic.bubblesmp.TreeConfig)
}

void TreeConfig::InitAsDefaultInstance() {
}

TreeConfig::TreeConfig(const TreeConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.ademovic.bubblesmp.TreeConfig)
}

void TreeConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  bubbles_per_extend_ = 25u;
  min_bubble_reach_ = 2;
  max_bubble_gap_ = 0.4;
  bubble_extend_ = 96;
  use_extended_bubbles_ = true;
  max_bubbles_per_branch_ = 50u;
  max_binary_search_depth_ = 4u;
  min_move_length_ = 0.9;
  step_length_ = 10;
  checks_per_step_ = 25u;
  s_min_ = 16;
  checks_on_s_min_ = 40u;
  bur_size_ = 7u;
  bur_threshold_ = 10u;
  number_of_extensions_ = 10u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreeConfig::~TreeConfig() {
  // @@protoc_insertion_point(destructor:com.ademovic.bubblesmp.TreeConfig)
  SharedDtor();
}

void TreeConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeConfig_descriptor_;
}

const TreeConfig& TreeConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

TreeConfig* TreeConfig::default_instance_ = NULL;

TreeConfig* TreeConfig::New() const {
  return new TreeConfig;
}

void TreeConfig::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    type_ = 0;
    bubbles_per_extend_ = 25u;
    min_bubble_reach_ = 2;
    max_bubble_gap_ = 0.4;
    bubble_extend_ = 96;
    use_extended_bubbles_ = true;
    max_bubbles_per_branch_ = 50u;
    max_binary_search_depth_ = 4u;
  }
  if (_has_bits_[8 / 32] & 65280) {
    min_move_length_ = 0.9;
    step_length_ = 10;
    checks_per_step_ = 25u;
    s_min_ = 16;
    checks_on_s_min_ = 40u;
    bur_size_ = 7u;
    bur_threshold_ = 10u;
    number_of_extensions_ = 10u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.ademovic.bubblesmp.TreeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.ademovic.bubblesmp.TreeConfig.Type type = 1 [default = BUBBLE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::ademovic::bubblesmp::TreeConfig_Type_IsValid(value)) {
            set_type(static_cast< ::com::ademovic::bubblesmp::TreeConfig_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_bubbles_per_branch;
        break;
      }

      // optional uint32 max_bubbles_per_branch = 2 [default = 50];
      case 2: {
        if (tag == 16) {
         parse_max_bubbles_per_branch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_bubbles_per_branch_)));
          set_has_max_bubbles_per_branch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_min_move_length;
        break;
      }

      // optional double min_move_length = 3 [default = 0.9];
      case 3: {
        if (tag == 25) {
         parse_min_move_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_move_length_)));
          set_has_min_move_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_step_length;
        break;
      }

      // optional double step_length = 4 [default = 10];
      case 4: {
        if (tag == 33) {
         parse_step_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_length_)));
          set_has_step_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_checks_per_step;
        break;
      }

      // optional uint32 checks_per_step = 5 [default = 25];
      case 5: {
        if (tag == 40) {
         parse_checks_per_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checks_per_step_)));
          set_has_checks_per_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_binary_search_depth;
        break;
      }

      // optional uint32 max_binary_search_depth = 7 [default = 4];
      case 7: {
        if (tag == 56) {
         parse_max_binary_search_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_binary_search_depth_)));
          set_has_max_binary_search_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bubbles_per_extend;
        break;
      }

      // optional uint32 bubbles_per_extend = 8 [default = 25];
      case 8: {
        if (tag == 64) {
         parse_bubbles_per_extend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bubbles_per_extend_)));
          set_has_bubbles_per_extend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_min_bubble_reach;
        break;
      }

      // optional double min_bubble_reach = 9 [default = 2];
      case 9: {
        if (tag == 73) {
         parse_min_bubble_reach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_bubble_reach_)));
          set_has_min_bubble_reach();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_max_bubble_gap;
        break;
      }

      // optional double max_bubble_gap = 10 [default = 0.4];
      case 10: {
        if (tag == 81) {
         parse_max_bubble_gap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_bubble_gap_)));
          set_has_max_bubble_gap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_bubble_extend;
        break;
      }

      // optional double bubble_extend = 11 [default = 96];
      case 11: {
        if (tag == 89) {
         parse_bubble_extend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bubble_extend_)));
          set_has_bubble_extend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_use_extended_bubbles;
        break;
      }

      // optional bool use_extended_bubbles = 12 [default = true];
      case 12: {
        if (tag == 96) {
         parse_use_extended_bubbles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_extended_bubbles_)));
          set_has_use_extended_bubbles();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_s_min;
        break;
      }

      // optional double s_min = 13 [default = 16];
      case 13: {
        if (tag == 105) {
         parse_s_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_min_)));
          set_has_s_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_checks_on_s_min;
        break;
      }

      // optional uint32 checks_on_s_min = 14 [default = 40];
      case 14: {
        if (tag == 112) {
         parse_checks_on_s_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checks_on_s_min_)));
          set_has_checks_on_s_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_bur_size;
        break;
      }

      // optional uint32 bur_size = 15 [default = 7];
      case 15: {
        if (tag == 120) {
         parse_bur_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bur_size_)));
          set_has_bur_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_bur_threshold;
        break;
      }

      // optional uint32 bur_threshold = 16 [default = 10];
      case 16: {
        if (tag == 128) {
         parse_bur_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bur_threshold_)));
          set_has_bur_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_number_of_extensions;
        break;
      }

      // optional uint32 number_of_extensions = 17 [default = 10];
      case 17: {
        if (tag == 136) {
         parse_number_of_extensions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_extensions_)));
          set_has_number_of_extensions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.ademovic.bubblesmp.TreeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.ademovic.bubblesmp.TreeConfig)
  return false;
#undef DO_
}

void TreeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.ademovic.bubblesmp.TreeConfig)
  // optional .com.ademovic.bubblesmp.TreeConfig.Type type = 1 [default = BUBBLE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 max_bubbles_per_branch = 2 [default = 50];
  if (has_max_bubbles_per_branch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_bubbles_per_branch(), output);
  }

  // optional double min_move_length = 3 [default = 0.9];
  if (has_min_move_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_move_length(), output);
  }

  // optional double step_length = 4 [default = 10];
  if (has_step_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->step_length(), output);
  }

  // optional uint32 checks_per_step = 5 [default = 25];
  if (has_checks_per_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->checks_per_step(), output);
  }

  // optional uint32 max_binary_search_depth = 7 [default = 4];
  if (has_max_binary_search_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_binary_search_depth(), output);
  }

  // optional uint32 bubbles_per_extend = 8 [default = 25];
  if (has_bubbles_per_extend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bubbles_per_extend(), output);
  }

  // optional double min_bubble_reach = 9 [default = 2];
  if (has_min_bubble_reach()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->min_bubble_reach(), output);
  }

  // optional double max_bubble_gap = 10 [default = 0.4];
  if (has_max_bubble_gap()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->max_bubble_gap(), output);
  }

  // optional double bubble_extend = 11 [default = 96];
  if (has_bubble_extend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->bubble_extend(), output);
  }

  // optional bool use_extended_bubbles = 12 [default = true];
  if (has_use_extended_bubbles()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->use_extended_bubbles(), output);
  }

  // optional double s_min = 13 [default = 16];
  if (has_s_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->s_min(), output);
  }

  // optional uint32 checks_on_s_min = 14 [default = 40];
  if (has_checks_on_s_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->checks_on_s_min(), output);
  }

  // optional uint32 bur_size = 15 [default = 7];
  if (has_bur_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->bur_size(), output);
  }

  // optional uint32 bur_threshold = 16 [default = 10];
  if (has_bur_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->bur_threshold(), output);
  }

  // optional uint32 number_of_extensions = 17 [default = 10];
  if (has_number_of_extensions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->number_of_extensions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.ademovic.bubblesmp.TreeConfig)
}

::google::protobuf::uint8* TreeConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.ademovic.bubblesmp.TreeConfig)
  // optional .com.ademovic.bubblesmp.TreeConfig.Type type = 1 [default = BUBBLE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 max_bubbles_per_branch = 2 [default = 50];
  if (has_max_bubbles_per_branch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_bubbles_per_branch(), target);
  }

  // optional double min_move_length = 3 [default = 0.9];
  if (has_min_move_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_move_length(), target);
  }

  // optional double step_length = 4 [default = 10];
  if (has_step_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->step_length(), target);
  }

  // optional uint32 checks_per_step = 5 [default = 25];
  if (has_checks_per_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->checks_per_step(), target);
  }

  // optional uint32 max_binary_search_depth = 7 [default = 4];
  if (has_max_binary_search_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_binary_search_depth(), target);
  }

  // optional uint32 bubbles_per_extend = 8 [default = 25];
  if (has_bubbles_per_extend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bubbles_per_extend(), target);
  }

  // optional double min_bubble_reach = 9 [default = 2];
  if (has_min_bubble_reach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->min_bubble_reach(), target);
  }

  // optional double max_bubble_gap = 10 [default = 0.4];
  if (has_max_bubble_gap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->max_bubble_gap(), target);
  }

  // optional double bubble_extend = 11 [default = 96];
  if (has_bubble_extend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->bubble_extend(), target);
  }

  // optional bool use_extended_bubbles = 12 [default = true];
  if (has_use_extended_bubbles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->use_extended_bubbles(), target);
  }

  // optional double s_min = 13 [default = 16];
  if (has_s_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->s_min(), target);
  }

  // optional uint32 checks_on_s_min = 14 [default = 40];
  if (has_checks_on_s_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->checks_on_s_min(), target);
  }

  // optional uint32 bur_size = 15 [default = 7];
  if (has_bur_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->bur_size(), target);
  }

  // optional uint32 bur_threshold = 16 [default = 10];
  if (has_bur_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->bur_threshold(), target);
  }

  // optional uint32 number_of_extensions = 17 [default = 10];
  if (has_number_of_extensions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->number_of_extensions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.ademovic.bubblesmp.TreeConfig)
  return target;
}

int TreeConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.ademovic.bubblesmp.TreeConfig.Type type = 1 [default = BUBBLE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 bubbles_per_extend = 8 [default = 25];
    if (has_bubbles_per_extend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bubbles_per_extend());
    }

    // optional double min_bubble_reach = 9 [default = 2];
    if (has_min_bubble_reach()) {
      total_size += 1 + 8;
    }

    // optional double max_bubble_gap = 10 [default = 0.4];
    if (has_max_bubble_gap()) {
      total_size += 1 + 8;
    }

    // optional double bubble_extend = 11 [default = 96];
    if (has_bubble_extend()) {
      total_size += 1 + 8;
    }

    // optional bool use_extended_bubbles = 12 [default = true];
    if (has_use_extended_bubbles()) {
      total_size += 1 + 1;
    }

    // optional uint32 max_bubbles_per_branch = 2 [default = 50];
    if (has_max_bubbles_per_branch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_bubbles_per_branch());
    }

    // optional uint32 max_binary_search_depth = 7 [default = 4];
    if (has_max_binary_search_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_binary_search_depth());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double min_move_length = 3 [default = 0.9];
    if (has_min_move_length()) {
      total_size += 1 + 8;
    }

    // optional double step_length = 4 [default = 10];
    if (has_step_length()) {
      total_size += 1 + 8;
    }

    // optional uint32 checks_per_step = 5 [default = 25];
    if (has_checks_per_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->checks_per_step());
    }

    // optional double s_min = 13 [default = 16];
    if (has_s_min()) {
      total_size += 1 + 8;
    }

    // optional uint32 checks_on_s_min = 14 [default = 40];
    if (has_checks_on_s_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->checks_on_s_min());
    }

    // optional uint32 bur_size = 15 [default = 7];
    if (has_bur_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bur_size());
    }

    // optional uint32 bur_threshold = 16 [default = 10];
    if (has_bur_threshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bur_threshold());
    }

    // optional uint32 number_of_extensions = 17 [default = 10];
    if (has_number_of_extensions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_extensions());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreeConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreeConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreeConfig::MergeFrom(const TreeConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bubbles_per_extend()) {
      set_bubbles_per_extend(from.bubbles_per_extend());
    }
    if (from.has_min_bubble_reach()) {
      set_min_bubble_reach(from.min_bubble_reach());
    }
    if (from.has_max_bubble_gap()) {
      set_max_bubble_gap(from.max_bubble_gap());
    }
    if (from.has_bubble_extend()) {
      set_bubble_extend(from.bubble_extend());
    }
    if (from.has_use_extended_bubbles()) {
      set_use_extended_bubbles(from.use_extended_bubbles());
    }
    if (from.has_max_bubbles_per_branch()) {
      set_max_bubbles_per_branch(from.max_bubbles_per_branch());
    }
    if (from.has_max_binary_search_depth()) {
      set_max_binary_search_depth(from.max_binary_search_depth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_min_move_length()) {
      set_min_move_length(from.min_move_length());
    }
    if (from.has_step_length()) {
      set_step_length(from.step_length());
    }
    if (from.has_checks_per_step()) {
      set_checks_per_step(from.checks_per_step());
    }
    if (from.has_s_min()) {
      set_s_min(from.s_min());
    }
    if (from.has_checks_on_s_min()) {
      set_checks_on_s_min(from.checks_on_s_min());
    }
    if (from.has_bur_size()) {
      set_bur_size(from.bur_size());
    }
    if (from.has_bur_threshold()) {
      set_bur_threshold(from.bur_threshold());
    }
    if (from.has_number_of_extensions()) {
      set_number_of_extensions(from.number_of_extensions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreeConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeConfig::CopyFrom(const TreeConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeConfig::IsInitialized() const {

  return true;
}

void TreeConfig::Swap(TreeConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(bubbles_per_extend_, other->bubbles_per_extend_);
    std::swap(min_bubble_reach_, other->min_bubble_reach_);
    std::swap(max_bubble_gap_, other->max_bubble_gap_);
    std::swap(bubble_extend_, other->bubble_extend_);
    std::swap(use_extended_bubbles_, other->use_extended_bubbles_);
    std::swap(max_bubbles_per_branch_, other->max_bubbles_per_branch_);
    std::swap(max_binary_search_depth_, other->max_binary_search_depth_);
    std::swap(min_move_length_, other->min_move_length_);
    std::swap(step_length_, other->step_length_);
    std::swap(checks_per_step_, other->checks_per_step_);
    std::swap(s_min_, other->s_min_);
    std::swap(checks_on_s_min_, other->checks_on_s_min_);
    std::swap(bur_size_, other->bur_size_);
    std::swap(bur_threshold_, other->bur_threshold_);
    std::swap(number_of_extensions_, other->number_of_extensions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreeConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreeConfig_descriptor_;
  metadata.reflection = TreeConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskConfig::kEnvironmentFieldNumber;
const int TaskConfig::kGeneratorFieldNumber;
const int TaskConfig::kIndexFieldNumber;
const int TaskConfig::kTreeFieldNumber;
const int TaskConfig::kSourceFieldNumber;
const int TaskConfig::kDestinationFieldNumber;
#endif  // !_MSC_VER

TaskConfig::TaskConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.ademovic.bubblesmp.TaskConfig)
}

void TaskConfig::InitAsDefaultInstance() {
  environment_ = const_cast< ::com::ademovic::bubblesmp::environment::EnvironmentConfig*>(&::com::ademovic::bubblesmp::environment::EnvironmentConfig::default_instance());
  generator_ = const_cast< ::com::ademovic::bubblesmp::generators::GeneratorSettings*>(&::com::ademovic::bubblesmp::generators::GeneratorSettings::default_instance());
  index_ = const_cast< ::com::ademovic::bubblesmp::IndexSettings*>(&::com::ademovic::bubblesmp::IndexSettings::default_instance());
  tree_ = const_cast< ::com::ademovic::bubblesmp::TreeConfig*>(&::com::ademovic::bubblesmp::TreeConfig::default_instance());
  source_ = const_cast< ::com::ademovic::bubblesmp::Point*>(&::com::ademovic::bubblesmp::Point::default_instance());
  destination_ = const_cast< ::com::ademovic::bubblesmp::Point*>(&::com::ademovic::bubblesmp::Point::default_instance());
}

TaskConfig::TaskConfig(const TaskConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.ademovic.bubblesmp.TaskConfig)
}

void TaskConfig::SharedCtor() {
  _cached_size_ = 0;
  environment_ = NULL;
  generator_ = NULL;
  index_ = NULL;
  tree_ = NULL;
  source_ = NULL;
  destination_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskConfig::~TaskConfig() {
  // @@protoc_insertion_point(destructor:com.ademovic.bubblesmp.TaskConfig)
  SharedDtor();
}

void TaskConfig::SharedDtor() {
  if (this != default_instance_) {
    delete environment_;
    delete generator_;
    delete index_;
    delete tree_;
    delete source_;
    delete destination_;
  }
}

void TaskConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskConfig_descriptor_;
}

const TaskConfig& TaskConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

TaskConfig* TaskConfig::default_instance_ = NULL;

TaskConfig* TaskConfig::New() const {
  return new TaskConfig;
}

void TaskConfig::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_environment()) {
      if (environment_ != NULL) environment_->::com::ademovic::bubblesmp::environment::EnvironmentConfig::Clear();
    }
    if (has_generator()) {
      if (generator_ != NULL) generator_->::com::ademovic::bubblesmp::generators::GeneratorSettings::Clear();
    }
    if (has_index()) {
      if (index_ != NULL) index_->::com::ademovic::bubblesmp::IndexSettings::Clear();
    }
    if (has_tree()) {
      if (tree_ != NULL) tree_->::com::ademovic::bubblesmp::TreeConfig::Clear();
    }
    if (has_source()) {
      if (source_ != NULL) source_->::com::ademovic::bubblesmp::Point::Clear();
    }
    if (has_destination()) {
      if (destination_ != NULL) destination_->::com::ademovic::bubblesmp::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.ademovic.bubblesmp.TaskConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.ademovic.bubblesmp.environment.EnvironmentConfig environment = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_environment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_generator;
        break;
      }

      // optional .com.ademovic.bubblesmp.generators.GeneratorSettings generator = 2;
      case 2: {
        if (tag == 18) {
         parse_generator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_index;
        break;
      }

      // optional .com.ademovic.bubblesmp.IndexSettings index = 3;
      case 3: {
        if (tag == 26) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tree;
        break;
      }

      // optional .com.ademovic.bubblesmp.TreeConfig tree = 4;
      case 4: {
        if (tag == 34) {
         parse_tree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tree()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_source;
        break;
      }

      // optional .com.ademovic.bubblesmp.Point source = 5;
      case 5: {
        if (tag == 42) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_destination;
        break;
      }

      // optional .com.ademovic.bubblesmp.Point destination = 6;
      case 6: {
        if (tag == 50) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.ademovic.bubblesmp.TaskConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.ademovic.bubblesmp.TaskConfig)
  return false;
#undef DO_
}

void TaskConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.ademovic.bubblesmp.TaskConfig)
  // optional .com.ademovic.bubblesmp.environment.EnvironmentConfig environment = 1;
  if (has_environment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->environment(), output);
  }

  // optional .com.ademovic.bubblesmp.generators.GeneratorSettings generator = 2;
  if (has_generator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->generator(), output);
  }

  // optional .com.ademovic.bubblesmp.IndexSettings index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->index(), output);
  }

  // optional .com.ademovic.bubblesmp.TreeConfig tree = 4;
  if (has_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tree(), output);
  }

  // optional .com.ademovic.bubblesmp.Point source = 5;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->source(), output);
  }

  // optional .com.ademovic.bubblesmp.Point destination = 6;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->destination(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.ademovic.bubblesmp.TaskConfig)
}

::google::protobuf::uint8* TaskConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.ademovic.bubblesmp.TaskConfig)
  // optional .com.ademovic.bubblesmp.environment.EnvironmentConfig environment = 1;
  if (has_environment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->environment(), target);
  }

  // optional .com.ademovic.bubblesmp.generators.GeneratorSettings generator = 2;
  if (has_generator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->generator(), target);
  }

  // optional .com.ademovic.bubblesmp.IndexSettings index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->index(), target);
  }

  // optional .com.ademovic.bubblesmp.TreeConfig tree = 4;
  if (has_tree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tree(), target);
  }

  // optional .com.ademovic.bubblesmp.Point source = 5;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->source(), target);
  }

  // optional .com.ademovic.bubblesmp.Point destination = 6;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->destination(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.ademovic.bubblesmp.TaskConfig)
  return target;
}

int TaskConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.ademovic.bubblesmp.environment.EnvironmentConfig environment = 1;
    if (has_environment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->environment());
    }

    // optional .com.ademovic.bubblesmp.generators.GeneratorSettings generator = 2;
    if (has_generator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->generator());
    }

    // optional .com.ademovic.bubblesmp.IndexSettings index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->index());
    }

    // optional .com.ademovic.bubblesmp.TreeConfig tree = 4;
    if (has_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tree());
    }

    // optional .com.ademovic.bubblesmp.Point source = 5;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source());
    }

    // optional .com.ademovic.bubblesmp.Point destination = 6;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destination());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskConfig::MergeFrom(const TaskConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_environment()) {
      mutable_environment()->::com::ademovic::bubblesmp::environment::EnvironmentConfig::MergeFrom(from.environment());
    }
    if (from.has_generator()) {
      mutable_generator()->::com::ademovic::bubblesmp::generators::GeneratorSettings::MergeFrom(from.generator());
    }
    if (from.has_index()) {
      mutable_index()->::com::ademovic::bubblesmp::IndexSettings::MergeFrom(from.index());
    }
    if (from.has_tree()) {
      mutable_tree()->::com::ademovic::bubblesmp::TreeConfig::MergeFrom(from.tree());
    }
    if (from.has_source()) {
      mutable_source()->::com::ademovic::bubblesmp::Point::MergeFrom(from.source());
    }
    if (from.has_destination()) {
      mutable_destination()->::com::ademovic::bubblesmp::Point::MergeFrom(from.destination());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskConfig::CopyFrom(const TaskConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskConfig::IsInitialized() const {

  return true;
}

void TaskConfig::Swap(TaskConfig* other) {
  if (other != this) {
    std::swap(environment_, other->environment_);
    std::swap(generator_, other->generator_);
    std::swap(index_, other->index_);
    std::swap(tree_, other->tree_);
    std::swap(source_, other->source_);
    std::swap(destination_, other->destination_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskConfig_descriptor_;
  metadata.reflection = TaskConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bubblesmp
}  // namespace ademovic
}  // namespace com

// @@protoc_insertion_point(global_scope)
