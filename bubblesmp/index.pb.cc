// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bubblesmp/index.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bubblesmp/index.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace ademovic {
namespace bubblesmp {

namespace {

const ::google::protobuf::Descriptor* IndexParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexParams_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* IndexParams_CentersInit_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SearchParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexSettings_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* IndexSettings_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_bubblesmp_2findex_2eproto() {
  protobuf_AddDesc_bubblesmp_2findex_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bubblesmp/index.proto");
  GOOGLE_CHECK(file != NULL);
  IndexParams_descriptor_ = file->message_type(0);
  static const int IndexParams_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexParams, trees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexParams, branching_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexParams, iterations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexParams, centers_init_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexParams, cb_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexParams, leaf_max_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexParams, table_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexParams, key_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexParams, multi_probe_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexParams, target_precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexParams, build_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexParams, memory_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexParams, sample_fraction_),
  };
  IndexParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexParams_descriptor_,
      IndexParams::default_instance_,
      IndexParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexParams));
  IndexParams_CentersInit_descriptor_ = IndexParams_descriptor_->enum_type(0);
  SearchParams_descriptor_ = file->message_type(1);
  static const int SearchParams_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchParams, checks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchParams, eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchParams, sorted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchParams, max_neighbors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchParams, use_heap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchParams, cores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchParams, matrices_in_gpu_ram_),
  };
  SearchParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchParams_descriptor_,
      SearchParams::default_instance_,
      SearchParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchParams));
  IndexSettings_descriptor_ = file->message_type(2);
  static const int IndexSettings_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexSettings, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexSettings, index_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexSettings, search_params_),
  };
  IndexSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexSettings_descriptor_,
      IndexSettings::default_instance_,
      IndexSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexSettings));
  IndexSettings_Type_descriptor_ = IndexSettings_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bubblesmp_2findex_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexParams_descriptor_, &IndexParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchParams_descriptor_, &SearchParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexSettings_descriptor_, &IndexSettings::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bubblesmp_2findex_2eproto() {
  delete IndexParams::default_instance_;
  delete IndexParams_reflection_;
  delete SearchParams::default_instance_;
  delete SearchParams_reflection_;
  delete IndexSettings::default_instance_;
  delete IndexSettings_reflection_;
}

void protobuf_AddDesc_bubblesmp_2findex_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025bubblesmp/index.proto\022\026com.ademovic.bu"
    "bblesmp\"\307\003\n\013IndexParams\022\020\n\005trees\030\001 \001(\005:\001"
    "4\022\025\n\tbranching\030\002 \001(\005:\00232\022\026\n\niterations\030\003"
    " \001(\005:\00211\022M\n\014centers_init\030\004 \001(\0162/.com.ade"
    "movic.bubblesmp.IndexParams.CentersInit:"
    "\006RANDOM\022\025\n\010cb_index\030\005 \001(\002:\0030.2\022\031\n\rleaf_m"
    "ax_size\030\006 \001(\005:\00210\022\030\n\014table_number\030\007 \001(\r:"
    "\00212\022\024\n\010key_size\030\010 \001(\r:\00220\022\034\n\021multi_probe"
    "_level\030\t \001(\r:\0012\022\035\n\020target_precision\030\n \001("
    "\002:\0030.9\022\032\n\014build_weight\030\013 \001(\002:\0040.01\022\030\n\rme"
    "mory_weight\030\014 \001(\002:\0010\022\034\n\017sample_fraction\030"
    "\r \001(\002:\0030.1\"5\n\013CentersInit\022\n\n\006RANDOM\020\000\022\014\n"
    "\010GONZALES\020\001\022\014\n\010KMEANSPP\020\002\"\244\001\n\014SearchPara"
    "ms\022\022\n\006checks\030\001 \001(\005:\00232\022\016\n\003eps\030\002 \001(\002:\0010\022\024"
    "\n\006sorted\030\003 \001(\010:\004true\022\031\n\rmax_neighbors\030\004 "
    "\001(\005:\002-1\022\020\n\010use_heap\030\005 \001(\010\022\020\n\005cores\030\006 \001(\005"
    ":\0010\022\033\n\023matrices_in_gpu_ram\030\007 \001(\010\"\252\002\n\rInd"
    "exSettings\0228\n\004type\030\001 \001(\0162*.com.ademovic."
    "bubblesmp.IndexSettings.Type\0229\n\014index_pa"
    "rams\030\002 \001(\0132#.com.ademovic.bubblesmp.Inde"
    "xParams\022;\n\rsearch_params\030\003 \001(\0132$.com.ade"
    "movic.bubblesmp.SearchParams\"g\n\004Type\022\n\n\006"
    "LINEAR\020\000\022\013\n\007KD_TREE\020\001\022\022\n\016KD_TREE_SINGLE\020"
    "\002\022\013\n\007K_MEANS\020\003\022\r\n\tCOMPOSITE\020\004\022\007\n\003LSH\020\005\022\r"
    "\n\tAUTOTUNED\020\006", 973);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bubblesmp/index.proto", &protobuf_RegisterTypes);
  IndexParams::default_instance_ = new IndexParams();
  SearchParams::default_instance_ = new SearchParams();
  IndexSettings::default_instance_ = new IndexSettings();
  IndexParams::default_instance_->InitAsDefaultInstance();
  SearchParams::default_instance_->InitAsDefaultInstance();
  IndexSettings::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bubblesmp_2findex_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bubblesmp_2findex_2eproto {
  StaticDescriptorInitializer_bubblesmp_2findex_2eproto() {
    protobuf_AddDesc_bubblesmp_2findex_2eproto();
  }
} static_descriptor_initializer_bubblesmp_2findex_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* IndexParams_CentersInit_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexParams_CentersInit_descriptor_;
}
bool IndexParams_CentersInit_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const IndexParams_CentersInit IndexParams::RANDOM;
const IndexParams_CentersInit IndexParams::GONZALES;
const IndexParams_CentersInit IndexParams::KMEANSPP;
const IndexParams_CentersInit IndexParams::CentersInit_MIN;
const IndexParams_CentersInit IndexParams::CentersInit_MAX;
const int IndexParams::CentersInit_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int IndexParams::kTreesFieldNumber;
const int IndexParams::kBranchingFieldNumber;
const int IndexParams::kIterationsFieldNumber;
const int IndexParams::kCentersInitFieldNumber;
const int IndexParams::kCbIndexFieldNumber;
const int IndexParams::kLeafMaxSizeFieldNumber;
const int IndexParams::kTableNumberFieldNumber;
const int IndexParams::kKeySizeFieldNumber;
const int IndexParams::kMultiProbeLevelFieldNumber;
const int IndexParams::kTargetPrecisionFieldNumber;
const int IndexParams::kBuildWeightFieldNumber;
const int IndexParams::kMemoryWeightFieldNumber;
const int IndexParams::kSampleFractionFieldNumber;
#endif  // !_MSC_VER

IndexParams::IndexParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.ademovic.bubblesmp.IndexParams)
}

void IndexParams::InitAsDefaultInstance() {
}

IndexParams::IndexParams(const IndexParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.ademovic.bubblesmp.IndexParams)
}

void IndexParams::SharedCtor() {
  _cached_size_ = 0;
  trees_ = 4;
  branching_ = 32;
  iterations_ = 11;
  centers_init_ = 0;
  cb_index_ = 0.2f;
  leaf_max_size_ = 10;
  table_number_ = 12u;
  key_size_ = 20u;
  multi_probe_level_ = 2u;
  target_precision_ = 0.9f;
  build_weight_ = 0.01f;
  memory_weight_ = 0;
  sample_fraction_ = 0.1f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexParams::~IndexParams() {
  // @@protoc_insertion_point(destructor:com.ademovic.bubblesmp.IndexParams)
  SharedDtor();
}

void IndexParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndexParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexParams_descriptor_;
}

const IndexParams& IndexParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bubblesmp_2findex_2eproto();
  return *default_instance_;
}

IndexParams* IndexParams::default_instance_ = NULL;

IndexParams* IndexParams::New() const {
  return new IndexParams;
}

void IndexParams::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    trees_ = 4;
    branching_ = 32;
    iterations_ = 11;
    centers_init_ = 0;
    cb_index_ = 0.2f;
    leaf_max_size_ = 10;
    table_number_ = 12u;
    key_size_ = 20u;
  }
  if (_has_bits_[8 / 32] & 7936) {
    multi_probe_level_ = 2u;
    target_precision_ = 0.9f;
    build_weight_ = 0.01f;
    memory_weight_ = 0;
    sample_fraction_ = 0.1f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.ademovic.bubblesmp.IndexParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 trees = 1 [default = 4];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trees_)));
          set_has_trees();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_branching;
        break;
      }

      // optional int32 branching = 2 [default = 32];
      case 2: {
        if (tag == 16) {
         parse_branching:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &branching_)));
          set_has_branching();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iterations;
        break;
      }

      // optional int32 iterations = 3 [default = 11];
      case 3: {
        if (tag == 24) {
         parse_iterations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iterations_)));
          set_has_iterations();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_centers_init;
        break;
      }

      // optional .com.ademovic.bubblesmp.IndexParams.CentersInit centers_init = 4 [default = RANDOM];
      case 4: {
        if (tag == 32) {
         parse_centers_init:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::ademovic::bubblesmp::IndexParams_CentersInit_IsValid(value)) {
            set_centers_init(static_cast< ::com::ademovic::bubblesmp::IndexParams_CentersInit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_cb_index;
        break;
      }

      // optional float cb_index = 5 [default = 0.2];
      case 5: {
        if (tag == 45) {
         parse_cb_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cb_index_)));
          set_has_cb_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_leaf_max_size;
        break;
      }

      // optional int32 leaf_max_size = 6 [default = 10];
      case 6: {
        if (tag == 48) {
         parse_leaf_max_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaf_max_size_)));
          set_has_leaf_max_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_table_number;
        break;
      }

      // optional uint32 table_number = 7 [default = 12];
      case 7: {
        if (tag == 56) {
         parse_table_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_number_)));
          set_has_table_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_key_size;
        break;
      }

      // optional uint32 key_size = 8 [default = 20];
      case 8: {
        if (tag == 64) {
         parse_key_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_size_)));
          set_has_key_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_multi_probe_level;
        break;
      }

      // optional uint32 multi_probe_level = 9 [default = 2];
      case 9: {
        if (tag == 72) {
         parse_multi_probe_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multi_probe_level_)));
          set_has_multi_probe_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_target_precision;
        break;
      }

      // optional float target_precision = 10 [default = 0.9];
      case 10: {
        if (tag == 85) {
         parse_target_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &target_precision_)));
          set_has_target_precision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_build_weight;
        break;
      }

      // optional float build_weight = 11 [default = 0.01];
      case 11: {
        if (tag == 93) {
         parse_build_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &build_weight_)));
          set_has_build_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_memory_weight;
        break;
      }

      // optional float memory_weight = 12 [default = 0];
      case 12: {
        if (tag == 101) {
         parse_memory_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &memory_weight_)));
          set_has_memory_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_sample_fraction;
        break;
      }

      // optional float sample_fraction = 13 [default = 0.1];
      case 13: {
        if (tag == 109) {
         parse_sample_fraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sample_fraction_)));
          set_has_sample_fraction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.ademovic.bubblesmp.IndexParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.ademovic.bubblesmp.IndexParams)
  return false;
#undef DO_
}

void IndexParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.ademovic.bubblesmp.IndexParams)
  // optional int32 trees = 1 [default = 4];
  if (has_trees()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trees(), output);
  }

  // optional int32 branching = 2 [default = 32];
  if (has_branching()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->branching(), output);
  }

  // optional int32 iterations = 3 [default = 11];
  if (has_iterations()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iterations(), output);
  }

  // optional .com.ademovic.bubblesmp.IndexParams.CentersInit centers_init = 4 [default = RANDOM];
  if (has_centers_init()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->centers_init(), output);
  }

  // optional float cb_index = 5 [default = 0.2];
  if (has_cb_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cb_index(), output);
  }

  // optional int32 leaf_max_size = 6 [default = 10];
  if (has_leaf_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->leaf_max_size(), output);
  }

  // optional uint32 table_number = 7 [default = 12];
  if (has_table_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->table_number(), output);
  }

  // optional uint32 key_size = 8 [default = 20];
  if (has_key_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->key_size(), output);
  }

  // optional uint32 multi_probe_level = 9 [default = 2];
  if (has_multi_probe_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->multi_probe_level(), output);
  }

  // optional float target_precision = 10 [default = 0.9];
  if (has_target_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->target_precision(), output);
  }

  // optional float build_weight = 11 [default = 0.01];
  if (has_build_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->build_weight(), output);
  }

  // optional float memory_weight = 12 [default = 0];
  if (has_memory_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->memory_weight(), output);
  }

  // optional float sample_fraction = 13 [default = 0.1];
  if (has_sample_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->sample_fraction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.ademovic.bubblesmp.IndexParams)
}

::google::protobuf::uint8* IndexParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.ademovic.bubblesmp.IndexParams)
  // optional int32 trees = 1 [default = 4];
  if (has_trees()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trees(), target);
  }

  // optional int32 branching = 2 [default = 32];
  if (has_branching()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->branching(), target);
  }

  // optional int32 iterations = 3 [default = 11];
  if (has_iterations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iterations(), target);
  }

  // optional .com.ademovic.bubblesmp.IndexParams.CentersInit centers_init = 4 [default = RANDOM];
  if (has_centers_init()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->centers_init(), target);
  }

  // optional float cb_index = 5 [default = 0.2];
  if (has_cb_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cb_index(), target);
  }

  // optional int32 leaf_max_size = 6 [default = 10];
  if (has_leaf_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->leaf_max_size(), target);
  }

  // optional uint32 table_number = 7 [default = 12];
  if (has_table_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->table_number(), target);
  }

  // optional uint32 key_size = 8 [default = 20];
  if (has_key_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->key_size(), target);
  }

  // optional uint32 multi_probe_level = 9 [default = 2];
  if (has_multi_probe_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->multi_probe_level(), target);
  }

  // optional float target_precision = 10 [default = 0.9];
  if (has_target_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->target_precision(), target);
  }

  // optional float build_weight = 11 [default = 0.01];
  if (has_build_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->build_weight(), target);
  }

  // optional float memory_weight = 12 [default = 0];
  if (has_memory_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->memory_weight(), target);
  }

  // optional float sample_fraction = 13 [default = 0.1];
  if (has_sample_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->sample_fraction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.ademovic.bubblesmp.IndexParams)
  return target;
}

int IndexParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 trees = 1 [default = 4];
    if (has_trees()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trees());
    }

    // optional int32 branching = 2 [default = 32];
    if (has_branching()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->branching());
    }

    // optional int32 iterations = 3 [default = 11];
    if (has_iterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iterations());
    }

    // optional .com.ademovic.bubblesmp.IndexParams.CentersInit centers_init = 4 [default = RANDOM];
    if (has_centers_init()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->centers_init());
    }

    // optional float cb_index = 5 [default = 0.2];
    if (has_cb_index()) {
      total_size += 1 + 4;
    }

    // optional int32 leaf_max_size = 6 [default = 10];
    if (has_leaf_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaf_max_size());
    }

    // optional uint32 table_number = 7 [default = 12];
    if (has_table_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_number());
    }

    // optional uint32 key_size = 8 [default = 20];
    if (has_key_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 multi_probe_level = 9 [default = 2];
    if (has_multi_probe_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multi_probe_level());
    }

    // optional float target_precision = 10 [default = 0.9];
    if (has_target_precision()) {
      total_size += 1 + 4;
    }

    // optional float build_weight = 11 [default = 0.01];
    if (has_build_weight()) {
      total_size += 1 + 4;
    }

    // optional float memory_weight = 12 [default = 0];
    if (has_memory_weight()) {
      total_size += 1 + 4;
    }

    // optional float sample_fraction = 13 [default = 0.1];
    if (has_sample_fraction()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexParams::MergeFrom(const IndexParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trees()) {
      set_trees(from.trees());
    }
    if (from.has_branching()) {
      set_branching(from.branching());
    }
    if (from.has_iterations()) {
      set_iterations(from.iterations());
    }
    if (from.has_centers_init()) {
      set_centers_init(from.centers_init());
    }
    if (from.has_cb_index()) {
      set_cb_index(from.cb_index());
    }
    if (from.has_leaf_max_size()) {
      set_leaf_max_size(from.leaf_max_size());
    }
    if (from.has_table_number()) {
      set_table_number(from.table_number());
    }
    if (from.has_key_size()) {
      set_key_size(from.key_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_multi_probe_level()) {
      set_multi_probe_level(from.multi_probe_level());
    }
    if (from.has_target_precision()) {
      set_target_precision(from.target_precision());
    }
    if (from.has_build_weight()) {
      set_build_weight(from.build_weight());
    }
    if (from.has_memory_weight()) {
      set_memory_weight(from.memory_weight());
    }
    if (from.has_sample_fraction()) {
      set_sample_fraction(from.sample_fraction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexParams::CopyFrom(const IndexParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexParams::IsInitialized() const {

  return true;
}

void IndexParams::Swap(IndexParams* other) {
  if (other != this) {
    std::swap(trees_, other->trees_);
    std::swap(branching_, other->branching_);
    std::swap(iterations_, other->iterations_);
    std::swap(centers_init_, other->centers_init_);
    std::swap(cb_index_, other->cb_index_);
    std::swap(leaf_max_size_, other->leaf_max_size_);
    std::swap(table_number_, other->table_number_);
    std::swap(key_size_, other->key_size_);
    std::swap(multi_probe_level_, other->multi_probe_level_);
    std::swap(target_precision_, other->target_precision_);
    std::swap(build_weight_, other->build_weight_);
    std::swap(memory_weight_, other->memory_weight_);
    std::swap(sample_fraction_, other->sample_fraction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexParams_descriptor_;
  metadata.reflection = IndexParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchParams::kChecksFieldNumber;
const int SearchParams::kEpsFieldNumber;
const int SearchParams::kSortedFieldNumber;
const int SearchParams::kMaxNeighborsFieldNumber;
const int SearchParams::kUseHeapFieldNumber;
const int SearchParams::kCoresFieldNumber;
const int SearchParams::kMatricesInGpuRamFieldNumber;
#endif  // !_MSC_VER

SearchParams::SearchParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.ademovic.bubblesmp.SearchParams)
}

void SearchParams::InitAsDefaultInstance() {
}

SearchParams::SearchParams(const SearchParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.ademovic.bubblesmp.SearchParams)
}

void SearchParams::SharedCtor() {
  _cached_size_ = 0;
  checks_ = 32;
  eps_ = 0;
  sorted_ = true;
  max_neighbors_ = -1;
  use_heap_ = false;
  cores_ = 0;
  matrices_in_gpu_ram_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchParams::~SearchParams() {
  // @@protoc_insertion_point(destructor:com.ademovic.bubblesmp.SearchParams)
  SharedDtor();
}

void SearchParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchParams_descriptor_;
}

const SearchParams& SearchParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bubblesmp_2findex_2eproto();
  return *default_instance_;
}

SearchParams* SearchParams::default_instance_ = NULL;

SearchParams* SearchParams::New() const {
  return new SearchParams;
}

void SearchParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SearchParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(use_heap_, cores_);
    checks_ = 32;
    eps_ = 0;
    sorted_ = true;
    max_neighbors_ = -1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.ademovic.bubblesmp.SearchParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 checks = 1 [default = 32];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checks_)));
          set_has_checks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_eps;
        break;
      }

      // optional float eps = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_eps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sorted;
        break;
      }

      // optional bool sorted = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_sorted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sorted_)));
          set_has_sorted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_neighbors;
        break;
      }

      // optional int32 max_neighbors = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_max_neighbors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_neighbors_)));
          set_has_max_neighbors();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_use_heap;
        break;
      }

      // optional bool use_heap = 5;
      case 5: {
        if (tag == 40) {
         parse_use_heap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_heap_)));
          set_has_use_heap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cores;
        break;
      }

      // optional int32 cores = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_cores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cores_)));
          set_has_cores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_matrices_in_gpu_ram;
        break;
      }

      // optional bool matrices_in_gpu_ram = 7;
      case 7: {
        if (tag == 56) {
         parse_matrices_in_gpu_ram:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &matrices_in_gpu_ram_)));
          set_has_matrices_in_gpu_ram();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.ademovic.bubblesmp.SearchParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.ademovic.bubblesmp.SearchParams)
  return false;
#undef DO_
}

void SearchParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.ademovic.bubblesmp.SearchParams)
  // optional int32 checks = 1 [default = 32];
  if (has_checks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->checks(), output);
  }

  // optional float eps = 2 [default = 0];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->eps(), output);
  }

  // optional bool sorted = 3 [default = true];
  if (has_sorted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->sorted(), output);
  }

  // optional int32 max_neighbors = 4 [default = -1];
  if (has_max_neighbors()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_neighbors(), output);
  }

  // optional bool use_heap = 5;
  if (has_use_heap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_heap(), output);
  }

  // optional int32 cores = 6 [default = 0];
  if (has_cores()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cores(), output);
  }

  // optional bool matrices_in_gpu_ram = 7;
  if (has_matrices_in_gpu_ram()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->matrices_in_gpu_ram(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.ademovic.bubblesmp.SearchParams)
}

::google::protobuf::uint8* SearchParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.ademovic.bubblesmp.SearchParams)
  // optional int32 checks = 1 [default = 32];
  if (has_checks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->checks(), target);
  }

  // optional float eps = 2 [default = 0];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->eps(), target);
  }

  // optional bool sorted = 3 [default = true];
  if (has_sorted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->sorted(), target);
  }

  // optional int32 max_neighbors = 4 [default = -1];
  if (has_max_neighbors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_neighbors(), target);
  }

  // optional bool use_heap = 5;
  if (has_use_heap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_heap(), target);
  }

  // optional int32 cores = 6 [default = 0];
  if (has_cores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cores(), target);
  }

  // optional bool matrices_in_gpu_ram = 7;
  if (has_matrices_in_gpu_ram()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->matrices_in_gpu_ram(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.ademovic.bubblesmp.SearchParams)
  return target;
}

int SearchParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 checks = 1 [default = 32];
    if (has_checks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checks());
    }

    // optional float eps = 2 [default = 0];
    if (has_eps()) {
      total_size += 1 + 4;
    }

    // optional bool sorted = 3 [default = true];
    if (has_sorted()) {
      total_size += 1 + 1;
    }

    // optional int32 max_neighbors = 4 [default = -1];
    if (has_max_neighbors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_neighbors());
    }

    // optional bool use_heap = 5;
    if (has_use_heap()) {
      total_size += 1 + 1;
    }

    // optional int32 cores = 6 [default = 0];
    if (has_cores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cores());
    }

    // optional bool matrices_in_gpu_ram = 7;
    if (has_matrices_in_gpu_ram()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchParams::MergeFrom(const SearchParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_checks()) {
      set_checks(from.checks());
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
    if (from.has_sorted()) {
      set_sorted(from.sorted());
    }
    if (from.has_max_neighbors()) {
      set_max_neighbors(from.max_neighbors());
    }
    if (from.has_use_heap()) {
      set_use_heap(from.use_heap());
    }
    if (from.has_cores()) {
      set_cores(from.cores());
    }
    if (from.has_matrices_in_gpu_ram()) {
      set_matrices_in_gpu_ram(from.matrices_in_gpu_ram());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchParams::CopyFrom(const SearchParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchParams::IsInitialized() const {

  return true;
}

void SearchParams::Swap(SearchParams* other) {
  if (other != this) {
    std::swap(checks_, other->checks_);
    std::swap(eps_, other->eps_);
    std::swap(sorted_, other->sorted_);
    std::swap(max_neighbors_, other->max_neighbors_);
    std::swap(use_heap_, other->use_heap_);
    std::swap(cores_, other->cores_);
    std::swap(matrices_in_gpu_ram_, other->matrices_in_gpu_ram_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchParams_descriptor_;
  metadata.reflection = SearchParams_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* IndexSettings_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexSettings_Type_descriptor_;
}
bool IndexSettings_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const IndexSettings_Type IndexSettings::LINEAR;
const IndexSettings_Type IndexSettings::KD_TREE;
const IndexSettings_Type IndexSettings::KD_TREE_SINGLE;
const IndexSettings_Type IndexSettings::K_MEANS;
const IndexSettings_Type IndexSettings::COMPOSITE;
const IndexSettings_Type IndexSettings::LSH;
const IndexSettings_Type IndexSettings::AUTOTUNED;
const IndexSettings_Type IndexSettings::Type_MIN;
const IndexSettings_Type IndexSettings::Type_MAX;
const int IndexSettings::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int IndexSettings::kTypeFieldNumber;
const int IndexSettings::kIndexParamsFieldNumber;
const int IndexSettings::kSearchParamsFieldNumber;
#endif  // !_MSC_VER

IndexSettings::IndexSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.ademovic.bubblesmp.IndexSettings)
}

void IndexSettings::InitAsDefaultInstance() {
  index_params_ = const_cast< ::com::ademovic::bubblesmp::IndexParams*>(&::com::ademovic::bubblesmp::IndexParams::default_instance());
  search_params_ = const_cast< ::com::ademovic::bubblesmp::SearchParams*>(&::com::ademovic::bubblesmp::SearchParams::default_instance());
}

IndexSettings::IndexSettings(const IndexSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.ademovic.bubblesmp.IndexSettings)
}

void IndexSettings::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  index_params_ = NULL;
  search_params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexSettings::~IndexSettings() {
  // @@protoc_insertion_point(destructor:com.ademovic.bubblesmp.IndexSettings)
  SharedDtor();
}

void IndexSettings::SharedDtor() {
  if (this != default_instance_) {
    delete index_params_;
    delete search_params_;
  }
}

void IndexSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexSettings_descriptor_;
}

const IndexSettings& IndexSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bubblesmp_2findex_2eproto();
  return *default_instance_;
}

IndexSettings* IndexSettings::default_instance_ = NULL;

IndexSettings* IndexSettings::New() const {
  return new IndexSettings;
}

void IndexSettings::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 0;
    if (has_index_params()) {
      if (index_params_ != NULL) index_params_->::com::ademovic::bubblesmp::IndexParams::Clear();
    }
    if (has_search_params()) {
      if (search_params_ != NULL) search_params_->::com::ademovic::bubblesmp::SearchParams::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.ademovic.bubblesmp.IndexSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.ademovic.bubblesmp.IndexSettings.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::ademovic::bubblesmp::IndexSettings_Type_IsValid(value)) {
            set_type(static_cast< ::com::ademovic::bubblesmp::IndexSettings_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_index_params;
        break;
      }

      // optional .com.ademovic.bubblesmp.IndexParams index_params = 2;
      case 2: {
        if (tag == 18) {
         parse_index_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_search_params;
        break;
      }

      // optional .com.ademovic.bubblesmp.SearchParams search_params = 3;
      case 3: {
        if (tag == 26) {
         parse_search_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_search_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.ademovic.bubblesmp.IndexSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.ademovic.bubblesmp.IndexSettings)
  return false;
#undef DO_
}

void IndexSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.ademovic.bubblesmp.IndexSettings)
  // optional .com.ademovic.bubblesmp.IndexSettings.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .com.ademovic.bubblesmp.IndexParams index_params = 2;
  if (has_index_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->index_params(), output);
  }

  // optional .com.ademovic.bubblesmp.SearchParams search_params = 3;
  if (has_search_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->search_params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.ademovic.bubblesmp.IndexSettings)
}

::google::protobuf::uint8* IndexSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.ademovic.bubblesmp.IndexSettings)
  // optional .com.ademovic.bubblesmp.IndexSettings.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .com.ademovic.bubblesmp.IndexParams index_params = 2;
  if (has_index_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->index_params(), target);
  }

  // optional .com.ademovic.bubblesmp.SearchParams search_params = 3;
  if (has_search_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->search_params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.ademovic.bubblesmp.IndexSettings)
  return target;
}

int IndexSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.ademovic.bubblesmp.IndexSettings.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .com.ademovic.bubblesmp.IndexParams index_params = 2;
    if (has_index_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->index_params());
    }

    // optional .com.ademovic.bubblesmp.SearchParams search_params = 3;
    if (has_search_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->search_params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexSettings::MergeFrom(const IndexSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index_params()) {
      mutable_index_params()->::com::ademovic::bubblesmp::IndexParams::MergeFrom(from.index_params());
    }
    if (from.has_search_params()) {
      mutable_search_params()->::com::ademovic::bubblesmp::SearchParams::MergeFrom(from.search_params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexSettings::CopyFrom(const IndexSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexSettings::IsInitialized() const {

  return true;
}

void IndexSettings::Swap(IndexSettings* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(index_params_, other->index_params_);
    std::swap(search_params_, other->search_params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexSettings_descriptor_;
  metadata.reflection = IndexSettings_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bubblesmp
}  // namespace ademovic
}  // namespace com

// @@protoc_insertion_point(global_scope)
