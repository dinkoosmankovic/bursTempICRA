// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bubblesmp/environment/environment.proto

#ifndef PROTOBUF_bubblesmp_2fenvironment_2fenvironment_2eproto__INCLUDED
#define PROTOBUF_bubblesmp_2fenvironment_2fenvironment_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace ademovic {
namespace bubblesmp {
namespace environment {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bubblesmp_2fenvironment_2fenvironment_2eproto();
void protobuf_AssignDesc_bubblesmp_2fenvironment_2fenvironment_2eproto();
void protobuf_ShutdownFile_bubblesmp_2fenvironment_2fenvironment_2eproto();

class Segment;
class Segment_Range;
class Robot;
class EnvironmentConfig;

enum EnvironmentConfig_Type {
  EnvironmentConfig_Type_FCL = 0
};
bool EnvironmentConfig_Type_IsValid(int value);
const EnvironmentConfig_Type EnvironmentConfig_Type_Type_MIN = EnvironmentConfig_Type_FCL;
const EnvironmentConfig_Type EnvironmentConfig_Type_Type_MAX = EnvironmentConfig_Type_FCL;
const int EnvironmentConfig_Type_Type_ARRAYSIZE = EnvironmentConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnvironmentConfig_Type_descriptor();
inline const ::std::string& EnvironmentConfig_Type_Name(EnvironmentConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnvironmentConfig_Type_descriptor(), value);
}
inline bool EnvironmentConfig_Type_Parse(
    const ::std::string& name, EnvironmentConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnvironmentConfig_Type>(
    EnvironmentConfig_Type_descriptor(), name, value);
}
// ===================================================================

class Segment_Range : public ::google::protobuf::Message {
 public:
  Segment_Range();
  virtual ~Segment_Range();

  Segment_Range(const Segment_Range& from);

  inline Segment_Range& operator=(const Segment_Range& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Segment_Range& default_instance();

  void Swap(Segment_Range* other);

  // implements Message ----------------------------------------------

  Segment_Range* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Segment_Range& from);
  void MergeFrom(const Segment_Range& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double min = 1;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 1;
  inline double min() const;
  inline void set_min(double value);

  // optional double max = 2;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 2;
  inline double max() const;
  inline void set_max(double value);

  // @@protoc_insertion_point(class_scope:com.ademovic.bubblesmp.environment.Segment.Range)
 private:
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double min_;
  double max_;
  friend void  protobuf_AddDesc_bubblesmp_2fenvironment_2fenvironment_2eproto();
  friend void protobuf_AssignDesc_bubblesmp_2fenvironment_2fenvironment_2eproto();
  friend void protobuf_ShutdownFile_bubblesmp_2fenvironment_2fenvironment_2eproto();

  void InitAsDefaultInstance();
  static Segment_Range* default_instance_;
};
// -------------------------------------------------------------------

class Segment : public ::google::protobuf::Message {
 public:
  Segment();
  virtual ~Segment();

  Segment(const Segment& from);

  inline Segment& operator=(const Segment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Segment& default_instance();

  void Swap(Segment* other);

  // implements Message ----------------------------------------------

  Segment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Segment& from);
  void MergeFrom(const Segment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Segment_Range Range;

  // accessors -------------------------------------------------------

  // optional double a = 1 [default = 0];
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline double a() const;
  inline void set_a(double value);

  // optional double theta = 2 [default = 0];
  inline bool has_theta() const;
  inline void clear_theta();
  static const int kThetaFieldNumber = 2;
  inline double theta() const;
  inline void set_theta(double value);

  // optional double d = 3 [default = 0];
  inline bool has_d() const;
  inline void clear_d();
  static const int kDFieldNumber = 3;
  inline double d() const;
  inline void set_d(double value);

  // optional double alpha = 4 [default = 0];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 4;
  inline double alpha() const;
  inline void set_alpha(double value);

  // optional .com.ademovic.bubblesmp.environment.Segment.Range range = 5;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 5;
  inline const ::com::ademovic::bubblesmp::environment::Segment_Range& range() const;
  inline ::com::ademovic::bubblesmp::environment::Segment_Range* mutable_range();
  inline ::com::ademovic::bubblesmp::environment::Segment_Range* release_range();
  inline void set_allocated_range(::com::ademovic::bubblesmp::environment::Segment_Range* range);

  // repeated string parts = 6;
  inline int parts_size() const;
  inline void clear_parts();
  static const int kPartsFieldNumber = 6;
  inline const ::std::string& parts(int index) const;
  inline ::std::string* mutable_parts(int index);
  inline void set_parts(int index, const ::std::string& value);
  inline void set_parts(int index, const char* value);
  inline void set_parts(int index, const char* value, size_t size);
  inline ::std::string* add_parts();
  inline void add_parts(const ::std::string& value);
  inline void add_parts(const char* value);
  inline void add_parts(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& parts() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_parts();

  // @@protoc_insertion_point(class_scope:com.ademovic.bubblesmp.environment.Segment)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_theta();
  inline void clear_has_theta();
  inline void set_has_d();
  inline void clear_has_d();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_range();
  inline void clear_has_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double a_;
  double theta_;
  double d_;
  double alpha_;
  ::com::ademovic::bubblesmp::environment::Segment_Range* range_;
  ::google::protobuf::RepeatedPtrField< ::std::string> parts_;
  friend void  protobuf_AddDesc_bubblesmp_2fenvironment_2fenvironment_2eproto();
  friend void protobuf_AssignDesc_bubblesmp_2fenvironment_2fenvironment_2eproto();
  friend void protobuf_ShutdownFile_bubblesmp_2fenvironment_2fenvironment_2eproto();

  void InitAsDefaultInstance();
  static Segment* default_instance_;
};
// -------------------------------------------------------------------

class Robot : public ::google::protobuf::Message {
 public:
  Robot();
  virtual ~Robot();

  Robot(const Robot& from);

  inline Robot& operator=(const Robot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Robot& default_instance();

  void Swap(Robot* other);

  // implements Message ----------------------------------------------

  Robot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Robot& from);
  void MergeFrom(const Robot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.ademovic.bubblesmp.environment.Segment segments = 1;
  inline int segments_size() const;
  inline void clear_segments();
  static const int kSegmentsFieldNumber = 1;
  inline const ::com::ademovic::bubblesmp::environment::Segment& segments(int index) const;
  inline ::com::ademovic::bubblesmp::environment::Segment* mutable_segments(int index);
  inline ::com::ademovic::bubblesmp::environment::Segment* add_segments();
  inline const ::google::protobuf::RepeatedPtrField< ::com::ademovic::bubblesmp::environment::Segment >&
      segments() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::ademovic::bubblesmp::environment::Segment >*
      mutable_segments();

  // @@protoc_insertion_point(class_scope:com.ademovic.bubblesmp.environment.Robot)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::ademovic::bubblesmp::environment::Segment > segments_;
  friend void  protobuf_AddDesc_bubblesmp_2fenvironment_2fenvironment_2eproto();
  friend void protobuf_AssignDesc_bubblesmp_2fenvironment_2fenvironment_2eproto();
  friend void protobuf_ShutdownFile_bubblesmp_2fenvironment_2fenvironment_2eproto();

  void InitAsDefaultInstance();
  static Robot* default_instance_;
};
// -------------------------------------------------------------------

class EnvironmentConfig : public ::google::protobuf::Message {
 public:
  EnvironmentConfig();
  virtual ~EnvironmentConfig();

  EnvironmentConfig(const EnvironmentConfig& from);

  inline EnvironmentConfig& operator=(const EnvironmentConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnvironmentConfig& default_instance();

  void Swap(EnvironmentConfig* other);

  // implements Message ----------------------------------------------

  EnvironmentConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnvironmentConfig& from);
  void MergeFrom(const EnvironmentConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EnvironmentConfig_Type Type;
  static const Type FCL = EnvironmentConfig_Type_FCL;
  static inline bool Type_IsValid(int value) {
    return EnvironmentConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    EnvironmentConfig_Type_Type_MIN;
  static const Type Type_MAX =
    EnvironmentConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    EnvironmentConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return EnvironmentConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return EnvironmentConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return EnvironmentConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .com.ademovic.bubblesmp.environment.EnvironmentConfig.Type type = 1 [default = FCL];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::com::ademovic::bubblesmp::environment::EnvironmentConfig_Type type() const;
  inline void set_type(::com::ademovic::bubblesmp::environment::EnvironmentConfig_Type value);

  // optional .com.ademovic.bubblesmp.environment.Robot robot_config = 2;
  inline bool has_robot_config() const;
  inline void clear_robot_config();
  static const int kRobotConfigFieldNumber = 2;
  inline const ::com::ademovic::bubblesmp::environment::Robot& robot_config() const;
  inline ::com::ademovic::bubblesmp::environment::Robot* mutable_robot_config();
  inline ::com::ademovic::bubblesmp::environment::Robot* release_robot_config();
  inline void set_allocated_robot_config(::com::ademovic::bubblesmp::environment::Robot* robot_config);

  // optional string robot_filename = 3;
  inline bool has_robot_filename() const;
  inline void clear_robot_filename();
  static const int kRobotFilenameFieldNumber = 3;
  inline const ::std::string& robot_filename() const;
  inline void set_robot_filename(const ::std::string& value);
  inline void set_robot_filename(const char* value);
  inline void set_robot_filename(const char* value, size_t size);
  inline ::std::string* mutable_robot_filename();
  inline ::std::string* release_robot_filename();
  inline void set_allocated_robot_filename(::std::string* robot_filename);

  // optional string environment_filename = 4;
  inline bool has_environment_filename() const;
  inline void clear_environment_filename();
  static const int kEnvironmentFilenameFieldNumber = 4;
  inline const ::std::string& environment_filename() const;
  inline void set_environment_filename(const ::std::string& value);
  inline void set_environment_filename(const char* value);
  inline void set_environment_filename(const char* value, size_t size);
  inline ::std::string* mutable_environment_filename();
  inline ::std::string* release_environment_filename();
  inline void set_allocated_environment_filename(::std::string* environment_filename);

  // optional double max_underestimate = 5 [default = 0];
  inline bool has_max_underestimate() const;
  inline void clear_max_underestimate();
  static const int kMaxUnderestimateFieldNumber = 5;
  inline double max_underestimate() const;
  inline void set_max_underestimate(double value);

  // @@protoc_insertion_point(class_scope:com.ademovic.bubblesmp.environment.EnvironmentConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_robot_config();
  inline void clear_has_robot_config();
  inline void set_has_robot_filename();
  inline void clear_has_robot_filename();
  inline void set_has_environment_filename();
  inline void clear_has_environment_filename();
  inline void set_has_max_underestimate();
  inline void clear_has_max_underestimate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::ademovic::bubblesmp::environment::Robot* robot_config_;
  ::std::string* robot_filename_;
  ::std::string* environment_filename_;
  double max_underestimate_;
  int type_;
  friend void  protobuf_AddDesc_bubblesmp_2fenvironment_2fenvironment_2eproto();
  friend void protobuf_AssignDesc_bubblesmp_2fenvironment_2fenvironment_2eproto();
  friend void protobuf_ShutdownFile_bubblesmp_2fenvironment_2fenvironment_2eproto();

  void InitAsDefaultInstance();
  static EnvironmentConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// Segment_Range

// optional double min = 1;
inline bool Segment_Range::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Segment_Range::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Segment_Range::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Segment_Range::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline double Segment_Range::min() const {
  // @@protoc_insertion_point(field_get:com.ademovic.bubblesmp.environment.Segment.Range.min)
  return min_;
}
inline void Segment_Range::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:com.ademovic.bubblesmp.environment.Segment.Range.min)
}

// optional double max = 2;
inline bool Segment_Range::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Segment_Range::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Segment_Range::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Segment_Range::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline double Segment_Range::max() const {
  // @@protoc_insertion_point(field_get:com.ademovic.bubblesmp.environment.Segment.Range.max)
  return max_;
}
inline void Segment_Range::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:com.ademovic.bubblesmp.environment.Segment.Range.max)
}

// -------------------------------------------------------------------

// Segment

// optional double a = 1 [default = 0];
inline bool Segment::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Segment::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Segment::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Segment::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline double Segment::a() const {
  // @@protoc_insertion_point(field_get:com.ademovic.bubblesmp.environment.Segment.a)
  return a_;
}
inline void Segment::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:com.ademovic.bubblesmp.environment.Segment.a)
}

// optional double theta = 2 [default = 0];
inline bool Segment::has_theta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Segment::set_has_theta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Segment::clear_has_theta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Segment::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline double Segment::theta() const {
  // @@protoc_insertion_point(field_get:com.ademovic.bubblesmp.environment.Segment.theta)
  return theta_;
}
inline void Segment::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:com.ademovic.bubblesmp.environment.Segment.theta)
}

// optional double d = 3 [default = 0];
inline bool Segment::has_d() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Segment::set_has_d() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Segment::clear_has_d() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Segment::clear_d() {
  d_ = 0;
  clear_has_d();
}
inline double Segment::d() const {
  // @@protoc_insertion_point(field_get:com.ademovic.bubblesmp.environment.Segment.d)
  return d_;
}
inline void Segment::set_d(double value) {
  set_has_d();
  d_ = value;
  // @@protoc_insertion_point(field_set:com.ademovic.bubblesmp.environment.Segment.d)
}

// optional double alpha = 4 [default = 0];
inline bool Segment::has_alpha() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Segment::set_has_alpha() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Segment::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Segment::clear_alpha() {
  alpha_ = 0;
  clear_has_alpha();
}
inline double Segment::alpha() const {
  // @@protoc_insertion_point(field_get:com.ademovic.bubblesmp.environment.Segment.alpha)
  return alpha_;
}
inline void Segment::set_alpha(double value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:com.ademovic.bubblesmp.environment.Segment.alpha)
}

// optional .com.ademovic.bubblesmp.environment.Segment.Range range = 5;
inline bool Segment::has_range() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Segment::set_has_range() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Segment::clear_has_range() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Segment::clear_range() {
  if (range_ != NULL) range_->::com::ademovic::bubblesmp::environment::Segment_Range::Clear();
  clear_has_range();
}
inline const ::com::ademovic::bubblesmp::environment::Segment_Range& Segment::range() const {
  // @@protoc_insertion_point(field_get:com.ademovic.bubblesmp.environment.Segment.range)
  return range_ != NULL ? *range_ : *default_instance_->range_;
}
inline ::com::ademovic::bubblesmp::environment::Segment_Range* Segment::mutable_range() {
  set_has_range();
  if (range_ == NULL) range_ = new ::com::ademovic::bubblesmp::environment::Segment_Range;
  // @@protoc_insertion_point(field_mutable:com.ademovic.bubblesmp.environment.Segment.range)
  return range_;
}
inline ::com::ademovic::bubblesmp::environment::Segment_Range* Segment::release_range() {
  clear_has_range();
  ::com::ademovic::bubblesmp::environment::Segment_Range* temp = range_;
  range_ = NULL;
  return temp;
}
inline void Segment::set_allocated_range(::com::ademovic::bubblesmp::environment::Segment_Range* range) {
  delete range_;
  range_ = range;
  if (range) {
    set_has_range();
  } else {
    clear_has_range();
  }
  // @@protoc_insertion_point(field_set_allocated:com.ademovic.bubblesmp.environment.Segment.range)
}

// repeated string parts = 6;
inline int Segment::parts_size() const {
  return parts_.size();
}
inline void Segment::clear_parts() {
  parts_.Clear();
}
inline const ::std::string& Segment::parts(int index) const {
  // @@protoc_insertion_point(field_get:com.ademovic.bubblesmp.environment.Segment.parts)
  return parts_.Get(index);
}
inline ::std::string* Segment::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:com.ademovic.bubblesmp.environment.Segment.parts)
  return parts_.Mutable(index);
}
inline void Segment::set_parts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.ademovic.bubblesmp.environment.Segment.parts)
  parts_.Mutable(index)->assign(value);
}
inline void Segment::set_parts(int index, const char* value) {
  parts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.ademovic.bubblesmp.environment.Segment.parts)
}
inline void Segment::set_parts(int index, const char* value, size_t size) {
  parts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.ademovic.bubblesmp.environment.Segment.parts)
}
inline ::std::string* Segment::add_parts() {
  return parts_.Add();
}
inline void Segment::add_parts(const ::std::string& value) {
  parts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.ademovic.bubblesmp.environment.Segment.parts)
}
inline void Segment::add_parts(const char* value) {
  parts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.ademovic.bubblesmp.environment.Segment.parts)
}
inline void Segment::add_parts(const char* value, size_t size) {
  parts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.ademovic.bubblesmp.environment.Segment.parts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Segment::parts() const {
  // @@protoc_insertion_point(field_list:com.ademovic.bubblesmp.environment.Segment.parts)
  return parts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Segment::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:com.ademovic.bubblesmp.environment.Segment.parts)
  return &parts_;
}

// -------------------------------------------------------------------

// Robot

// repeated .com.ademovic.bubblesmp.environment.Segment segments = 1;
inline int Robot::segments_size() const {
  return segments_.size();
}
inline void Robot::clear_segments() {
  segments_.Clear();
}
inline const ::com::ademovic::bubblesmp::environment::Segment& Robot::segments(int index) const {
  // @@protoc_insertion_point(field_get:com.ademovic.bubblesmp.environment.Robot.segments)
  return segments_.Get(index);
}
inline ::com::ademovic::bubblesmp::environment::Segment* Robot::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:com.ademovic.bubblesmp.environment.Robot.segments)
  return segments_.Mutable(index);
}
inline ::com::ademovic::bubblesmp::environment::Segment* Robot::add_segments() {
  // @@protoc_insertion_point(field_add:com.ademovic.bubblesmp.environment.Robot.segments)
  return segments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::ademovic::bubblesmp::environment::Segment >&
Robot::segments() const {
  // @@protoc_insertion_point(field_list:com.ademovic.bubblesmp.environment.Robot.segments)
  return segments_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::ademovic::bubblesmp::environment::Segment >*
Robot::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:com.ademovic.bubblesmp.environment.Robot.segments)
  return &segments_;
}

// -------------------------------------------------------------------

// EnvironmentConfig

// optional .com.ademovic.bubblesmp.environment.EnvironmentConfig.Type type = 1 [default = FCL];
inline bool EnvironmentConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnvironmentConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnvironmentConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnvironmentConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::com::ademovic::bubblesmp::environment::EnvironmentConfig_Type EnvironmentConfig::type() const {
  // @@protoc_insertion_point(field_get:com.ademovic.bubblesmp.environment.EnvironmentConfig.type)
  return static_cast< ::com::ademovic::bubblesmp::environment::EnvironmentConfig_Type >(type_);
}
inline void EnvironmentConfig::set_type(::com::ademovic::bubblesmp::environment::EnvironmentConfig_Type value) {
  assert(::com::ademovic::bubblesmp::environment::EnvironmentConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.ademovic.bubblesmp.environment.EnvironmentConfig.type)
}

// optional .com.ademovic.bubblesmp.environment.Robot robot_config = 2;
inline bool EnvironmentConfig::has_robot_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnvironmentConfig::set_has_robot_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnvironmentConfig::clear_has_robot_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnvironmentConfig::clear_robot_config() {
  if (robot_config_ != NULL) robot_config_->::com::ademovic::bubblesmp::environment::Robot::Clear();
  clear_has_robot_config();
}
inline const ::com::ademovic::bubblesmp::environment::Robot& EnvironmentConfig::robot_config() const {
  // @@protoc_insertion_point(field_get:com.ademovic.bubblesmp.environment.EnvironmentConfig.robot_config)
  return robot_config_ != NULL ? *robot_config_ : *default_instance_->robot_config_;
}
inline ::com::ademovic::bubblesmp::environment::Robot* EnvironmentConfig::mutable_robot_config() {
  set_has_robot_config();
  if (robot_config_ == NULL) robot_config_ = new ::com::ademovic::bubblesmp::environment::Robot;
  // @@protoc_insertion_point(field_mutable:com.ademovic.bubblesmp.environment.EnvironmentConfig.robot_config)
  return robot_config_;
}
inline ::com::ademovic::bubblesmp::environment::Robot* EnvironmentConfig::release_robot_config() {
  clear_has_robot_config();
  ::com::ademovic::bubblesmp::environment::Robot* temp = robot_config_;
  robot_config_ = NULL;
  return temp;
}
inline void EnvironmentConfig::set_allocated_robot_config(::com::ademovic::bubblesmp::environment::Robot* robot_config) {
  delete robot_config_;
  robot_config_ = robot_config;
  if (robot_config) {
    set_has_robot_config();
  } else {
    clear_has_robot_config();
  }
  // @@protoc_insertion_point(field_set_allocated:com.ademovic.bubblesmp.environment.EnvironmentConfig.robot_config)
}

// optional string robot_filename = 3;
inline bool EnvironmentConfig::has_robot_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnvironmentConfig::set_has_robot_filename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnvironmentConfig::clear_has_robot_filename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnvironmentConfig::clear_robot_filename() {
  if (robot_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    robot_filename_->clear();
  }
  clear_has_robot_filename();
}
inline const ::std::string& EnvironmentConfig::robot_filename() const {
  // @@protoc_insertion_point(field_get:com.ademovic.bubblesmp.environment.EnvironmentConfig.robot_filename)
  return *robot_filename_;
}
inline void EnvironmentConfig::set_robot_filename(const ::std::string& value) {
  set_has_robot_filename();
  if (robot_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    robot_filename_ = new ::std::string;
  }
  robot_filename_->assign(value);
  // @@protoc_insertion_point(field_set:com.ademovic.bubblesmp.environment.EnvironmentConfig.robot_filename)
}
inline void EnvironmentConfig::set_robot_filename(const char* value) {
  set_has_robot_filename();
  if (robot_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    robot_filename_ = new ::std::string;
  }
  robot_filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.ademovic.bubblesmp.environment.EnvironmentConfig.robot_filename)
}
inline void EnvironmentConfig::set_robot_filename(const char* value, size_t size) {
  set_has_robot_filename();
  if (robot_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    robot_filename_ = new ::std::string;
  }
  robot_filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.ademovic.bubblesmp.environment.EnvironmentConfig.robot_filename)
}
inline ::std::string* EnvironmentConfig::mutable_robot_filename() {
  set_has_robot_filename();
  if (robot_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    robot_filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.ademovic.bubblesmp.environment.EnvironmentConfig.robot_filename)
  return robot_filename_;
}
inline ::std::string* EnvironmentConfig::release_robot_filename() {
  clear_has_robot_filename();
  if (robot_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = robot_filename_;
    robot_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EnvironmentConfig::set_allocated_robot_filename(::std::string* robot_filename) {
  if (robot_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete robot_filename_;
  }
  if (robot_filename) {
    set_has_robot_filename();
    robot_filename_ = robot_filename;
  } else {
    clear_has_robot_filename();
    robot_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.ademovic.bubblesmp.environment.EnvironmentConfig.robot_filename)
}

// optional string environment_filename = 4;
inline bool EnvironmentConfig::has_environment_filename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnvironmentConfig::set_has_environment_filename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnvironmentConfig::clear_has_environment_filename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnvironmentConfig::clear_environment_filename() {
  if (environment_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    environment_filename_->clear();
  }
  clear_has_environment_filename();
}
inline const ::std::string& EnvironmentConfig::environment_filename() const {
  // @@protoc_insertion_point(field_get:com.ademovic.bubblesmp.environment.EnvironmentConfig.environment_filename)
  return *environment_filename_;
}
inline void EnvironmentConfig::set_environment_filename(const ::std::string& value) {
  set_has_environment_filename();
  if (environment_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    environment_filename_ = new ::std::string;
  }
  environment_filename_->assign(value);
  // @@protoc_insertion_point(field_set:com.ademovic.bubblesmp.environment.EnvironmentConfig.environment_filename)
}
inline void EnvironmentConfig::set_environment_filename(const char* value) {
  set_has_environment_filename();
  if (environment_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    environment_filename_ = new ::std::string;
  }
  environment_filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.ademovic.bubblesmp.environment.EnvironmentConfig.environment_filename)
}
inline void EnvironmentConfig::set_environment_filename(const char* value, size_t size) {
  set_has_environment_filename();
  if (environment_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    environment_filename_ = new ::std::string;
  }
  environment_filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.ademovic.bubblesmp.environment.EnvironmentConfig.environment_filename)
}
inline ::std::string* EnvironmentConfig::mutable_environment_filename() {
  set_has_environment_filename();
  if (environment_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    environment_filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.ademovic.bubblesmp.environment.EnvironmentConfig.environment_filename)
  return environment_filename_;
}
inline ::std::string* EnvironmentConfig::release_environment_filename() {
  clear_has_environment_filename();
  if (environment_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = environment_filename_;
    environment_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EnvironmentConfig::set_allocated_environment_filename(::std::string* environment_filename) {
  if (environment_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete environment_filename_;
  }
  if (environment_filename) {
    set_has_environment_filename();
    environment_filename_ = environment_filename;
  } else {
    clear_has_environment_filename();
    environment_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.ademovic.bubblesmp.environment.EnvironmentConfig.environment_filename)
}

// optional double max_underestimate = 5 [default = 0];
inline bool EnvironmentConfig::has_max_underestimate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EnvironmentConfig::set_has_max_underestimate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EnvironmentConfig::clear_has_max_underestimate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EnvironmentConfig::clear_max_underestimate() {
  max_underestimate_ = 0;
  clear_has_max_underestimate();
}
inline double EnvironmentConfig::max_underestimate() const {
  // @@protoc_insertion_point(field_get:com.ademovic.bubblesmp.environment.EnvironmentConfig.max_underestimate)
  return max_underestimate_;
}
inline void EnvironmentConfig::set_max_underestimate(double value) {
  set_has_max_underestimate();
  max_underestimate_ = value;
  // @@protoc_insertion_point(field_set:com.ademovic.bubblesmp.environment.EnvironmentConfig.max_underestimate)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace environment
}  // namespace bubblesmp
}  // namespace ademovic
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::ademovic::bubblesmp::environment::EnvironmentConfig_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::ademovic::bubblesmp::environment::EnvironmentConfig_Type>() {
  return ::com::ademovic::bubblesmp::environment::EnvironmentConfig_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bubblesmp_2fenvironment_2fenvironment_2eproto__INCLUDED
